{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf760
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 angleMode = "radians";\
\
var Particle = function(position) \{\
    this.acceleration = new PVector(0, 0.05);\
    this.velocity = new PVector(random(0, 1), random(0, 0));\
    this.position = position;\
    this.angle = 0;\
    this.aVelocity = 0;\
    this.aAcceleration = 0.001;\
\};\
\
Particle.prototype.run = function() \{\
    this.update();\
    this.display();\
\};\
\
Particle.prototype.update = function()\{\
    this.velocity.add(this.acceleration);\
    this.position.add(this.velocity);\
    this.angle += this.aVelocity;\
    this.aVelocity += this.aAcceleration;\
\
\};\
\
Particle.prototype.display = function() \{\
    pushMatrix();\
    translate(this.position.x, this.position.y);\
    rotate(this.angle);\
    image(getImage("avatars/leaf-green"), 0, 0, 40, 40);\
    popMatrix();\
\};\
\
var Tree = function(position, options) \{\
    this.position = position.get();\
    this.branchingFactor = 3;\
    this.angleBetweenBranches = 32;\
    this.scaleFactor = 0.7;\
    this.numLevels = 4;\
    this.baseBranchLength = 120;\
\};\
\
Tree.prototype.display = function() \{\
    var self = this;\
    \
    var forward = function(distance) \{\
        line(0, 0, 0, -distance);\
        translate(0, -distance);\
    \};\
    \
    var back = function(distance) \{\
        forward(-distance);\
    \};\
    \
    var right = function(angle) \{\
        rotate(angle * PI / 180);\
    \};\
    \
    var left = function(angle) \{\
        right(-angle);\
    \};\
    \
    var drawTree = function(depth, length) \{\
        if (depth === 0) \{\
            image(getImage("avatars/leaf-green"), -10, -30, 40, 40);\
            return;\
        \}\
        var totalAngle = self.angleBetweenBranches * (self.branchingFactor - 1);\
        \
        strokeWeight(depth*5);\
        forward(length);\
        right(totalAngle / 2.0);\
        for (var i = 0; i < self.branchingFactor; i += 1) \{\
            drawTree(depth - 1, length * self.scaleFactor);\
            left(self.angleBetweenBranches);\
        \}\
        right(totalAngle / 2.0 + self.angleBetweenBranches);\
        back(length);\
    \};\
    \
    pushMatrix();\
    translate(this.position.x, this.position.y);\
    stroke(122, 112, 85);\
    drawTree(this.numLevels, this.baseBranchLength);\
    popMatrix();\
\};\
\
var leaves = [];\
var tree = new Tree(new PVector(width/2, 400));\
\
mouseClicked = function()\{\
    leaves.push(new Particle (new PVector(mouseX, mouseY)));\
\};\
\
draw = function() \{\
    background(194, 231, 255);\
    tree.display();\
    for (var i = 0; i < leaves.length; i++)\{\
        var leaf = leaves[i];\
        if (leaf.position.y > height-10)\{\
            leaf.position.set(leaf.position.x, height-10);\
            leaf.velocity.set(0,0);\
            leaf.acceleration.set(0,0);\
            leaf.aVelocity = 0;\
            leaf.aAcceleration = 0;\
            \
        \}\
        leaf.run();\
    \}\
\};\
}